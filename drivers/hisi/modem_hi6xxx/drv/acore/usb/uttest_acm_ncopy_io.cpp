

/*****************************************************************************
  1 头文件包含
*****************************************************************************/
#include "gtest/gtest.h"
#include "llt_mockcpp.h"

using namespace testing;


#ifdef __cplusplus
extern "C" {
#endif

#ifndef OK
#define OK 0
#endif

#ifndef ERROR
#define ERROR (-1)
#endif


struct gserial_stub {
    int *in;
    int *out;
};

struct gserial_stub g_port;


extern int acm_ncopy_init(int acm_dev);
extern int acm_ncopy_uninit(int acm_dev);
extern int v2p_get_pa(int va, int *pa);
extern struct usb_request * acm_ncopy_alloc_one_request(int gfp_flags);
extern void acm_ncopy_free_one_request(struct usb_request *req);
extern long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
extern int  acm_ncopy_alloc_requests(struct list_head *head, void (*fn)(struct usb_ep *, struct usb_request *), int *allocated);
extern struct gserial *usb_tty_port_get(void *handle);
extern int acm_ncopy_queue(struct acm_ncopy_ctx * acm_ncopy, unsigned char *buf, unsigned int size);
extern void* acm_ncopy_port_ready(void *tty);


extern int test_acm_ncopy_init_get_tty_fail(void);
extern int test_acm_ncopy_init_ncopy_invalid(void);
extern int test_acm_ncopy_init_alloc_fail(void);
extern int test_acm_ncopy_init_success(void);
extern int test_acm_ncopy_uninit_ncopy_invalid(void);
extern int test_acm_ncopy_uninit_success(void);
extern int test_acm_ncopy_alloc_requests_req_null(void);
extern int test_acm_ncopy_alloc_requests_success(void);
extern int test_acm_ncopy_free_requests_success(void);
extern int test_acm_ncopy_start_tx_ctx_null(void);
extern int test_acm_ncopy_start_tx_buf_null(void);
extern int test_acm_ncopy_start_tx_size_0(void);
extern int test_acm_ncopy_start_tx_size_invalid(void);
extern int test_acm_ncopy_start_tx_available(void);
extern int test_acm_ncopy_start_tx_unavailable(void);
extern int test_acm_ncopy_queue_list_empty(void);
extern int test_acm_ncopy_queue_success(void);
extern int test_acm_ncopy_tx_task_queue_fail(void);
extern int test_acm_ncopy_tx_task_tx_success(void);
extern int test_acm_ncopy_tx_complete_send_success(void);
extern int test_acm_ncopy_tx_complete_send_fail(void);
extern int test_acm_ncopy_tx_complete_free_called(void);
extern int test_acm_ncopy_tx_complete_write_done_called(void);
extern struct usb_request * test_alloc_request_null();
extern struct usb_request * test_alloc_request();

#ifdef __cplusplus
}
#endif


void *ut_acm_ncopy_port_ready(void *tty)
{
    return ((void *) &g_port);
}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ncopy_init, UT001_input_param_invalid)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = acm_ncopy_init(0);


    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}

TEST(test_acm_ncopy_init, UT002_acm_ncopy_invalid)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_init_ncopy_invalid();


    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(test_acm_ncopy_init, UT003_acm_alloc_fail)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(acm_ncopy_port_ready).stubs().will(invoke(ut_acm_ncopy_port_ready));
    MOCKER(acm_ncopy_alloc_requests).stubs().will(returnValue(-1));
    ret = test_acm_ncopy_init_alloc_fail();


    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(test_acm_ncopy_init, UT004_acm_ncopy_init_success)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(acm_ncopy_alloc_requests).stubs().will(returnValue(0));
	MOCKER(acm_ncopy_port_ready).stubs().will(invoke(ut_acm_ncopy_port_ready));
	
    ret = test_acm_ncopy_init_success();


    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(test_acm_ncopy_uninit, UT001_input_param_invalid)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = acm_ncopy_uninit(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}

TEST(test_acm_ncopy_uninit, UT002_ncopy_invalid)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_uninit_ncopy_invalid();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}

#if 0
TEST(test_acm_ncopy_uninit, UT003_uninit_success)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_uninit_success();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}
#endif

TEST(test_acm_ncopy_alloc_requests, UT001_req_null)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(acm_ncopy_alloc_one_request).stubs().will(invoke(test_alloc_request_null));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_alloc_requests_req_null();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-12,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(test_acm_ncopy_alloc_requests, UT001_alloc_success)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(acm_ncopy_alloc_one_request).stubs().will(invoke(test_alloc_request));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_alloc_requests_success();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(test_acm_ncopy_free_requests, UT001_free_success)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(acm_ncopy_free_one_request).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_free_requests_success();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}


TEST(test_acm_ncopy_start_tx, UT001_ctx_null)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_start_tx_ctx_null();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}

TEST(test_acm_ncopy_start_tx, UT002_buf_null)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_start_tx_buf_null();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}

TEST(test_acm_ncopy_start_tx, UT003_size_0)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_start_tx_size_0();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}

TEST(test_acm_ncopy_start_tx, UT004_size_invalid)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_start_tx_size_invalid();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}

#if 0
TEST(test_acm_ncopy_start_tx, UT005_available)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(acm_ncopy_queue).stubs().will(returnValue(0));

    ret = test_acm_ncopy_start_tx_available();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



TEST(test_acm_ncopy_start_tx, UT006_unavailable)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_start_tx_unavailable();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}
#endif

#if 0
TEST(test_acm_ncopy_queue, UT001_list_empty)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    //AMOCKER(list_empty).will(returnValue(1));
    ret = test_acm_ncopy_queue_list_empty();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    //AMOCKER(list_empty).stubs();
}

TEST(test_acm_ncopy_queue, UT002_queue_success)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(v2p_get_pa).stubs().will(returnValue(0));
    ret = test_acm_ncopy_queue_success();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}
#endif

#if 0
TEST(test_acm_ncopy_tx_task, UT001_queue_fail)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_tx_task_queue_fail();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(test_acm_ncopy_tx_task, UT002_tx_success)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_tx_task_tx_success();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}
#endif

#if 0

TEST(test_acm_ncopy_tx_complete, UT001_send_success)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_tx_complete_send_success();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(test_acm_ncopy_tx_complete, UT002_send_fail)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_tx_complete_send_fail();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(test_acm_ncopy_tx_complete, UT003_free_called)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_tx_complete_free_called();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(test_acm_ncopy_tx_complete, UT004_write_done_called)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
   	//MOCKER(acm_ncopy_queue).stubs().will(returnValue(0));

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ncopy_tx_complete_write_done_called();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    //GlobalMockObject::reset();
}


#endif
