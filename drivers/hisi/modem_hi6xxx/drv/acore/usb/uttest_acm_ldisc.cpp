

/*****************************************************************************
  1 头文件包含
*****************************************************************************/
#include "gtest/gtest.h"
#include "llt_mockcpp.h"
using namespace testing;




#ifdef __cplusplus
extern "C" {
#endif

#ifndef OK
#define OK 0
#endif

#ifndef ERROR
#define ERROR (-1)
#endif


extern void acm_ut_init();
extern void stub_read_down();
extern int stub_count();
extern int stub_write(void *, const unsigned char *, int );

extern int test_acm_ldisc_open();
extern int test_acm_free_list();
extern int test_acm_ldisc_close_ldisc_data_null();
extern int test_acm_ldisc_close_normal();
extern int test_acm_ldisc_read_ok();
extern int test_acm_ldisc_read_left_mem();
extern int test_acm_ldisc_write_async();
extern int test_acm_ldisc_write_sync();
extern int test_acm_write_task_list_empty();
extern int test_acm_write_task_list_node();
extern int test_acm_write_task_left_node();
extern int test_acm_ldisc_receive_buf_cshell();
extern int test_acm_ldisc_receive_buf_no_up();
extern int test_acm_ldisc_write_wakeup_err();
extern int test_acm_ldisc_write_wakeup_ok();
extern int test_acm_ldisc_init();
extern int test_acm_ldisc_exit();
extern int test_acm_ldisc_ioctl_check_arg();
extern int test_acm_ldisc_ioctl_get_rd_buf();
extern int test_acm_ldisc_ioctl_return_buf();
extern int test_acm_ldisc_ioctl_default();
extern int test_acm_ldisc_get_rd_buf_left_mem_null();
extern int test_acm_ldisc_get_rd_buf_left_mem_data();
extern int test_acm_ldisc_get_rd_buf_list_empty();
extern int test_acm_ldisc_return_buf();
extern int test_acm_ldisc_return_buf_error();

extern void *kmalloc(int , int);
extern void down(void *);
extern void _raw_spin_lock(void *);
extern int _test_and_set_bit();
extern int up();
extern void __tasklet_schedule();
extern int tty_register_ldisc();
extern int tty_unregister_ldisc();
extern int acm_ldisc_ioctl();
extern int acm_ldisc_get_rd_buf();
extern int acm_ldisc_return_buf();

extern int g_count;


#ifdef __cplusplus
}
#endif

void ut_count(void)
{
    g_count++;
}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_open, UT001_normal)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_open();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/


}



/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_free_list, UT001_free_node)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret  = test_acm_free_list();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/


}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_close, UT001_ldisc_data_NULL)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_close_ldisc_data_null();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/


}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_close, UT002_normal)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_close_normal();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/


}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_write, UT001_async)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(__tasklet_schedule).stubs().will(returnValue(0));
    ret = test_acm_ldisc_write_async();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(4, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();


}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/

#if 0
/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_write, UT002_sync)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(__tasklet_schedule).stubs().will(returnValue(0));
    ret = test_acm_ldisc_write_sync();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(8, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    MOCKER(__tasklet_schedule).stubs();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_write_task, UT001_write_data_empty)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_acm_write_task_list_empty();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/


}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_write_task, UT002_write_list_node)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_write_task_list_node();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_write_task, UT003_write_left_node)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_write_task_left_node();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/


}
#endif

/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
#if 0
TEST(test_acm_ldisc_receive_buf, UT001_all_with_cshell)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_receive_buf_cshell();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/


}
#endif

TEST(test_acm_ldisc_receive_buf, UT002_no_up)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(up).stubs().will(invoke(stub_count));
    ret = test_acm_ldisc_receive_buf_no_up();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_write_wakeup, UT001_ldisc_priv_null)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_write_wakeup_err();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_write_wakeup, UT002_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(__tasklet_schedule).stubs().will(invoke(ut_count));
    ret = test_acm_ldisc_write_wakeup_ok();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_init, UT001_register_fail)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(tty_register_ldisc).stubs().will(returnValue(ERROR));
    ret = test_acm_ldisc_init();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_init, UT002_register_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(tty_register_ldisc).stubs().will(returnValue(OK));
    ret = test_acm_ldisc_init();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_exit, UT001_unregister_fail)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(tty_unregister_ldisc).stubs().will(returnValue(ERROR));
    ret = test_acm_ldisc_exit();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_exit, UT002_unregister_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(tty_unregister_ldisc).stubs().will(returnValue(0));
    ret = test_acm_ldisc_exit();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_ioctl, UT001_acm_ldisc_ioctl_check_arg)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
    MOCKER(acm_ldisc_get_rd_buf).stubs().will(returnValue(OK));

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_ioctl_check_arg();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_ioctl, UT002_acm_ldisc_ioctl_get_rd_buf_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
    MOCKER(acm_ldisc_get_rd_buf).stubs().will(returnValue(OK));

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_ioctl_get_rd_buf();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_ioctl, UT003_acm_ldisc_ioctl_get_rd_buf_error)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
    MOCKER(acm_ldisc_get_rd_buf).stubs().will(returnValue(ERROR));

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_ioctl_get_rd_buf();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_ioctl, UT004_acm_ldisc_ioctl_return_buf_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
    MOCKER(acm_ldisc_return_buf).stubs().will(returnValue(OK));

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_ioctl_return_buf();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_ioctl, UT005_acm_ldisc_ioctl_return_buf_error)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
    MOCKER(acm_ldisc_return_buf).stubs().will(returnValue(ERROR));

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_ioctl_return_buf();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_ioctl, UT006_acm_ldisc_ioctl_default)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_ioctl_default();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}



/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_get_rd_buf, UT001_acm_ldisc_get_rd_buf_left_mem_null)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_get_rd_buf_left_mem_null();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_get_rd_buf, UT002_test_acm_ldisc_get_rd_buf_left_mem_data)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_get_rd_buf_left_mem_data();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_get_rd_buf, UT003_test_acm_ldisc_get_rd_buf_list_empty)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_get_rd_buf_list_empty();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}


/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_acm_ldisc_return_buf, UT001_acm_ldisc_return_buf)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    ret = test_acm_ldisc_return_buf();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK, ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}


