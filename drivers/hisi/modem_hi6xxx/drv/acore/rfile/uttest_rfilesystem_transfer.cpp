/******************************************************************************

                  版权所有 (C), 2001-2011, 华为技术有限公司

 ******************************************************************************
  文 件 名   : test_rfile_transfer.cpp
  版 本 号   : 初稿
  作    者   :
  生成日期   : 2013年01月29日
  最近修改   :
  功能描述   : UT测试脚本
  函数列表   :
  修改历史   :
  1.日    期   : 2013年01月29日
    作    者   :
    修改内容   : 创建文件

******************************************************************************/

/*****************************************************************************
  1 头文件包含
*****************************************************************************/
#include "gtest/gtest.h"
#include "llt_mockcpp.h"

using namespace testing;

#ifdef __cplusplus
extern "C"
{
#endif

#ifndef SUCCESS
#define SUCCESS 0
#endif

#ifndef FAIL
#define FAIL -1
#endif

/* 设备的打开参数 */
typedef struct tagUDI_OPEN_PARAM
{
	unsigned int devid;	     /* 设备ID */
	void   *pPrivate;		/* 模块特有的数据 */
} UDI_OPEN_PARAM_S;


typedef struct
{
   unsigned int opsPid;
   unsigned int totalFrame;
   unsigned int curFrame;
   unsigned int curlen;
   int reserve;
}RFILE_MNTN_HEADER;

typedef int (*fileOps)(RFILE_MNTN_HEADER *header, char * data);

extern int test_rfile_icc_read_cmd_cb(void);
extern int test_rfile_icc_read_cmd_cb_iccOpened(void);
extern int test_rfile_ifc_cp2ap_ack(void);
extern int test_rfile_write_cmdtoccpu_pkt(void);
extern int test_rfile_filesystem_sync( void );
extern int test_rfile_a_give_c_sem(void);
extern int test_rfile_icc_read_cb( void );
extern int test_rfile_transfer_init(void);
extern int test_rfile_init_cb(void);
extern int test_rfile_process_ccpu_pkt_success( void );
extern int test_rfile_process_ccpu_pkt_fail_opstype_excude( void );
extern int test_rfile_process_ccpu_pkt_fail_ops_null(void);
extern int test_rfile_process_task(void);
extern int test_rfile_init_thread(void);
extern int set_rFileContext_a_value( int value );
extern int check_acore_only(void);
extern int rfile_process_task(void);
extern int rfile_transfer_init(void);

extern int  rfile_write_cmdtoccpu_pkt(int opspid,char *send_buf,unsigned int send_len);
extern unsigned int BSP_IFC_Send(void * pMspBody, unsigned int u32Len);
extern signed int udi_read(signed int handle, void* pMemObj, unsigned int u32Size);
extern signed int udi_write(signed int handle, void* pMemObj, unsigned int u32Size);
extern signed int udi_open(UDI_OPEN_PARAM_S *pParam);
extern void *__kmalloc(unsigned int size, int flags);
extern void *kmem_cache_alloc_trace(unsigned int size, int flags);
extern int rfile_read_ccpu_pkt( RFILE_MNTN_HEADER *mntn_header );
extern int rfile_process_ccpu_pkt( RFILE_MNTN_HEADER *header );


#ifdef __cplusplus
}
#endif
TEST(test_test_rfile_filesystem_sync, UT001_ifc_send_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_write_cmdtoccpu_pkt).stubs().will(returnValue(0));
    ret = test_rfile_filesystem_sync();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(SUCCESS,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



TEST(test_test_rfile_filesystem_sync, UT002_ifc_send_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_write_cmdtoccpu_pkt).stubs().will(returnValue(-1));
    ret = test_rfile_filesystem_sync();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


TEST(test_test_rfile_a_give_c_sem, UT001_ifc_send_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_write_cmdtoccpu_pkt).stubs().will(returnValue(0));
    ret = test_rfile_a_give_c_sem();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(SUCCESS,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


TEST(test_test_rfile_a_give_c_sem, UT002_ifc_send_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_write_cmdtoccpu_pkt).stubs().will(returnValue(-1));
    ret = test_rfile_a_give_c_sem();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



TEST(test_test_rfile_icc_read_cb, UT001_icc_opened)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    set_rFileContext_a_value(1);
    MOCKER(udi_read).stubs().will(returnValue(0));

    ret = test_rfile_icc_read_cb();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



TEST(test_test_rfile_icc_read_cb, UT002_icc_closed)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    set_rFileContext_a_value(0);
    MOCKER(udi_read).stubs().will(returnValue(0));
    MOCKER(BSP_IFC_Send).stubs().will(returnValue(0));

    ret = test_rfile_icc_read_cb();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}



TEST(test_test_rfile_icc_read_cb, UT003_icc_closed)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    set_rFileContext_a_value(0);
    MOCKER(udi_read).stubs().will(returnValue(2));
    ret = test_rfile_icc_read_cb();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



TEST(test_test_rfile_icc_read_cb, UT004_icc_closed)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    set_rFileContext_a_value(1);
    MOCKER(udi_read).stubs().will(returnValue(-1));
    ret = test_rfile_icc_read_cb();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


TEST(test_test_rfile_transfer_init, UT001_udiopen_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    MOCKER(udi_open).stubs().will(returnValue(1));
    MOCKER(__kmalloc).stubs().will(returnValue((void*)1));
    MOCKER(kmem_cache_alloc_trace).stubs().will(returnValue((void*)1));

    ret = test_rfile_transfer_init();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}



TEST(test_test_rfile_transfer_init, UT002_udiopen_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    MOCKER(udi_open).stubs().will(returnValue(0));

    ret = test_rfile_transfer_init();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}


TEST(test_test_rfile_transfer_init, UT003_udiopen2_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    MOCKER(udi_open).stubs().will(returnValue(1)).then(returnValue(0));
    MOCKER(__kmalloc).stubs().will(returnValue((void*)1));
    MOCKER(kmem_cache_alloc_trace).stubs().will(returnValue((void*)1));

    ret = test_rfile_transfer_init();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}


TEST(test_test_rfile_transfer_init, UT004_kmalloc2_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    MOCKER(udi_open).stubs().will(returnValue(1)).then(returnValue(1));
    MOCKER(__kmalloc).stubs().will(returnValue((void*)1)).then(returnValue((void*)0));
    MOCKER(kmem_cache_alloc_trace).stubs().will(returnValue((void*)0));

    ret = test_rfile_transfer_init();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}


TEST(test_test_rfile_transfer_init, UT005_udiopen_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    MOCKER(udi_open).stubs().will(returnValue(1));
    MOCKER(__kmalloc).stubs().will(returnValue((void*)1));
    MOCKER(kmem_cache_alloc_trace).stubs().will(returnValue((void*)1));

    ret = test_rfile_transfer_init();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();

}



TEST(test_test_rfile_process_ccpu_pkt, UT001_proces_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/


    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_rfile_process_ccpu_pkt_success();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}



TEST(test_test_rfile_process_ccpu_pkt, UT002_opstype_excude)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*申请相关内存并且填充*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_rfile_process_ccpu_pkt_fail_opstype_excude();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}



TEST(test_test_rfile_process_ccpu_pkt, UT003_ops_null)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_rfile_process_ccpu_pkt_fail_ops_null();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}



TEST(test_test_rfile_init_thread, UT001_init_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_rfile_init_thread();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/

}


TEST(test_test_rfile_init_thread, UT002_init_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
	MOCKER(check_acore_only).stubs().will(returnValue(1));
    ret = test_rfile_init_thread();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}



TEST(test_test_rfile_init_cb, UT001_init_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_transfer_init).stubs().will(returnValue(0));
    ret = test_rfile_init_cb();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}



TEST(test_test_rfile_init_cb, UT002_init_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_transfer_init).stubs().will(returnValue(-1));
    ret = test_rfile_init_cb();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}



TEST(test_test_rfile_process_task, UT001_process_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_read_ccpu_pkt).stubs().will(returnValue(0));
    MOCKER(rfile_process_ccpu_pkt).stubs().will(returnValue(0));

    ret = test_rfile_process_task();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}


TEST(test_test_rfile_process_task, UT002_process_err)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_read_ccpu_pkt).stubs().will(returnValue(0));
    MOCKER(rfile_process_ccpu_pkt).stubs().will(returnValue(-1));

    ret = test_rfile_process_task();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}



TEST(test_test_rfile_process_task, UT003_process_err)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(rfile_read_ccpu_pkt).stubs().will(returnValue(-1));
    MOCKER(rfile_process_ccpu_pkt).stubs().will(returnValue(0));

    ret = test_rfile_process_task();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}


TEST(test_rfile_write_cmdtoccpu_pkt, UT001_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(udi_write).stubs().will(returnValue(0));

    ret = test_rfile_write_cmdtoccpu_pkt();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}


TEST(test_rfile_write_cmdtoccpu_pkt, UT002_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(udi_write).stubs().will(returnValue(1));

    ret = test_rfile_write_cmdtoccpu_pkt();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}


TEST(test_rfile_ifc_cp2ap_ack, UT001_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_rfile_ifc_cp2ap_ack();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}


TEST(test_rfile_icc_read_cmd_cb_iccOpened, UT001_iccOpened)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
	MOCKER(udi_read).stubs().will(returnValue(1));
    ret = test_rfile_icc_read_cmd_cb_iccOpened();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}



TEST(test_rfile_icc_read_cmd_cb, UT001_udi_read_fail)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
	MOCKER(udi_read).stubs().will(returnValue(0));
    ret = test_rfile_icc_read_cmd_cb_iccOpened();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}


TEST(test_rfile_icc_read_cmd_cb, UT001_udi_read_success)
{
    int ret = 0;
    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    /*操作函数为空*/

    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
	MOCKER(udi_read).stubs().will(returnValue(1));
    ret = test_rfile_icc_read_cmd_cb_iccOpened();

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(0,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}
