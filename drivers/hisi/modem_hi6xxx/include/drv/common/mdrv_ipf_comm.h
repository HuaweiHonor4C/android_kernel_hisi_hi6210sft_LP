#ifndef __MDRV_IPF_COMMON_H__
#define __MDRV_IPF_COMMON_H__

#ifdef __cplusplus
extern "C"
{
#endif

/* error code definition */
#define IPF_SUCCESS             0
#define IPF_ERROR               -1
#define BSP_ERR_IPF_INVALID_PARA            BSP_DEF_ERR(BSP_MODU_IPF, 0)
#define BSP_ERR_IPF_BDQ_NOT_ENOUGH          BSP_DEF_ERR(BSP_MODU_IPF, 1)
#define BSP_ERR_IPF_CDQ_NOT_ENOUGH          BSP_DEF_ERR(BSP_MODU_IPF, 2)
#define BSP_ERR_IPF_RDQ_EMPTY               BSP_DEF_ERR(BSP_MODU_IPF, 3)
#define BSP_ERR_IPF_FILTER_NOT_ENOUGH       BSP_DEF_ERR(BSP_MODU_IPF, 4)
#define BSP_ERR_IPF_NOT_INIT                BSP_DEF_ERR(BSP_MODU_IPF, 5)
#define BSP_ERR_IPF_RESUME_TIMEOUT          BSP_DEF_ERR(BSP_MODU_IPF, 6)
#define BSP_ERR_IPF_SEMTAKE_TIMEOUT         BSP_DEF_ERR(BSP_MODU_IPF, 7)
#define BSP_ERR_IPF_ADQ0_NOT_ENOUGH         BSP_DEF_ERR(BSP_MODU_IPF, 8)
#define BSP_ERR_IPF_ADQ1_NOT_ENOUGH         BSP_DEF_ERR(BSP_MODU_IPF, 9)
#define BSP_ERR_IPF_ALLOC_MEM_FAIL          BSP_DEF_ERR(BSP_MODU_IPF, 10)
#define BSP_ERR_IPF_CCORE_RESETTING         BSP_DEF_ERR(BSP_MODU_IPF, 11)
#define BSP_ERR_IPF_INVALID_DLRD            BSP_DEF_ERR(BSP_MODU_IPF, 12)
#define BSP_ERR_IPF_INVALID_ULRD            BSP_DEF_ERR(BSP_MODU_IPF, 13)

#define IPF_ULBD_DESC_SIZE         64   /* 上行BD个数 */
#define IPF_ULRD_DESC_SIZE         64   /* 上行BD个数 */
#define IPF_DLBD_DESC_SIZE         64   /* 下行BD个数 */
#define IPF_DLRD_DESC_SIZE         64   /* 下行BD个数 */
#if defined(CHIP_BB_HI6210)
#define IPF_ULAD0_DESC_SIZE        64   /* 上行ADQ0中AD个数 */
#define IPF_ULAD1_DESC_SIZE        64   /* 上行ADQ1中AD个数 */
#define IPF_DLAD0_DESC_SIZE        64   /* 下行ADQ0中AD个数 */
#define IPF_DLAD1_DESC_SIZE        64   /* 下行ADQ1中AD个数 */
#else
#define IPF_ULAD0_DESC_SIZE        128   /* 上行ADQ0中AD个数 */
#define IPF_ULAD1_DESC_SIZE        128   /* 上行ADQ1中AD个数 */
#define IPF_DLAD0_DESC_SIZE        128   /* 下行ADQ0中AD个数 */
#define IPF_DLAD1_DESC_SIZE        128   /* 下行ADQ1中AD个数 */
#endif
#define IPF_DLCD_DESC_SIZE         1024 /* 上海需求 */
#define IPF_FILTER_CHAIN_MAX_NUM   8    /* IPF过滤器链最大个数 */

/*ADQ使能枚举值*/
typedef enum tagIPF_ADQEN_E
{
    IPF_NONE_ADQ_EN = 0,    /*不使用ADQ*/
    IPF_ONLY_ADQ0_EN = 1,   /*仅使用ADQ0*/
    IPF_ONLY_ADQ1_EN = 2,   /*仅使用ADQ1*/
    IPF_BOTH_ADQ_EN = 3,    /*使用ADQ0和ADQ1*/

    IPF_ADQEN_BUTT          /*边界值*/
}IPF_ADQEN_E;

/*ADSize*/
typedef enum tagIPF_ADSIZE_E
{
    IPF_ADSIZE_32 = 0,  /* AD队列大小为32 */
    IPF_ADSIZE_64,      /* AD队列大小为64 */
    IPF_ADSIZE_128,     /* AD队列大小为128 */
    IPF_ADSIZE_256,     /* AD队列大小为256*/

    IPF_ADSIZE_MAX
}IPF_ADSIZE_E;

/* 过滤模式 */
typedef enum tagIPF_MODE_E
{
	IPF_MODE_FILTERANDTRANS,
	IPF_MODE_FILTERONLY,
    IPF_MODE_TRANSONLY,
    IPF_MODE_TRANSONLY2,
    IPF_MODE_MAX
}IPF_MODE_E;

/*ADQ空标志枚举值*/
typedef enum tagIPF_ADQ_EMPTY_E
{
    IPF_EMPTY_ADQ0 = 0,
    IPF_EMPTY_ADQ1 = 1,
    IPF_EMPTY_ADQ = 2,
    IPF_EMPTY_MAX
}IPF_ADQ_EMPTY_E;

/* IPF状态标识 */
typedef enum tagIPF_RESTORE_STATE_E
{
    IPF_STATE_UNRESTORE = 0,   /* 未恢复 */
    IPF_STATE_RESTORING,       /* 恢复中 */
    IPF_STATE_RESTORED,        /* 已恢复 */

    IPF_STATE_MAX
}IPF_RESTORE_STATE_E;

/* IP类型 */
typedef enum tagIPF_IP_TYPE_E
{
    IPF_IPTYPE_V4 = 0,  /* IPV4 */
    IPF_IPTYPE_V6,      /* IPV6 */

    IPF_IPTYPE_MAX      /* 边界值 */
}IPF_IP_TYPE_E;

typedef enum tagIPF_AD_TYPE_E
{
    IPF_AD_0 = 0,        /* AD0 使用两个AD队列时为短包队列，使用一个AD对列时为长包队列*/
    IPF_AD_1,            /* AD1 长包队列*/
    IPF_AD_MAX           /* 边界值 */
}IPF_AD_TYPE_E;

typedef enum tagIPF_CHANNEL_TYPE_E
{
    IPF_CHANNEL_UP	= 0,
    IPF_CHANNEL_DOWN,
    IPF_CHANNEL_MAX
}IPF_CHANNEL_TYPE_E;

typedef enum tagIPF_FILTER_CHAIN_TYPE_E
{
	IPF_MODEM0_ULFC = 0,
	IPF_MODEM1_ULFC,
	IPF_MODEM0_DLFC,
	IPF_MODEM1_DLFC,
	IPF_MODEM_MAX,
}IPF_FILTER_CHAIN_TYPE_E;

typedef struct
{
    unsigned short u16Len;         /* 上行数据源长度 */
    unsigned short u16Attribute;   /* 上行IP包属性 */
    unsigned int   u32Data;        /* 上行数据源地址 */
    unsigned short u16UsrField1;   /* Usr field 域1 ,透传 */
    unsigned short u16Reserved;    /* 预留 */
    unsigned int   u32UsrField2;   /* Usr field 域2 ,透传 */
    unsigned int   u32UsrField3;   /* Usr field 域3 ,透传*/
}IPF_CONFIG_PARAM_S;

struct mdrv_ipf_ops {
    int (*adq_empty_cb)(IPF_ADQ_EMPTY_E eAdqEmpty);
    int (*rx_complete_cb)(void);
};

/* RD描述符 */
typedef struct
{
    unsigned short u16Attribute;
    unsigned short u16PktLen;
    unsigned int u32InPtr;
    unsigned int u32OutPtr;
    unsigned short u16Result;
    unsigned short u16UsrField1;
    unsigned int u32UsrField2;
    unsigned int u32UsrField3;
}IPF_RD_DESC_S;

/* BD描述符 */
typedef struct tagIPF_BD_DESC_S
{
    unsigned short u16Attribute;
    unsigned short u16PktLen;
    unsigned int u32InPtr;
    unsigned int u32OutPtr;
    unsigned short u16Result;
    unsigned short u16UsrField1;
    unsigned int u32UsrField2;
    unsigned int u32UsrField3;
} IPF_BD_DESC_S;

/* AD描述符 */
typedef struct tagIPF_AD_DESC_S
{
    unsigned int u32OutPtr0;
    unsigned int u32OutPtr1;
} IPF_AD_DESC_S;

/* CD描述符 */
typedef struct tagIPF_CD_DESC_S
{
    unsigned short u16Attribute;
    unsigned short u16PktLen;
    unsigned int u32Ptr;
}IPF_CD_DESC_S;

/* 统计计数信息结构体 */
typedef struct tagIPF_FILTER_STAT_S
{
    unsigned int u32UlCnt0;
    unsigned int u32UlCnt1;
    unsigned int u32UlCnt2;
    unsigned int u32DlCnt0;
    unsigned int u32DlCnt1;
    unsigned int u32DlCnt2;
}IPF_FILTER_STAT_S;

typedef IPF_CONFIG_PARAM_S IPF_CONFIG_ULPARAM_S;
typedef IPF_CONFIG_PARAM_S IPF_CONFIG_DLPARAM_S;

/*****************************************************************************
* 函 数 名  : mdrv_ipf_register_ops
*
* 功能描述  : 注册ops函数，目前包括下下行/上行数据处理的中断回调函数和ADQ空
*             中断的响应函数
*
* 输入参数  : struct mdrv_ipf_ops *ops  相应的回调处理函数
* 输出参数  :
*
* 返 回 值  : IPF_SUCCESS 配置成功
*             IPF_ERROR 配置失败
* 其它说明  :
*
*****************************************************************************/
int mdrv_ipf_register_ops(struct mdrv_ipf_ops *ops);

#ifdef __cplusplus
}
#endif

#endif
