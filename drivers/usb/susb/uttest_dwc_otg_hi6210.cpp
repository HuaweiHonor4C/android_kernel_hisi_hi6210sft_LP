
#ifdef CONFIG_HI3635_USB
/*****************************************************************************
  1 头文件包含
*****************************************************************************/
#include "gtest/gtest.h"
#include "llt_mockcpp.h"

using namespace testing;
#ifdef __cplusplus
extern "C"
{
#endif

	#define OK          0
	#define ERROR       -1

    /* 被测函数 */
	extern int test_get_charger_name(int);
	extern int test_hiusb_charger_registe_notifier(int);
	extern int test_hiusb_charger_unregiste_notifier(int);
	extern int test_switch_init(int);
	extern int test_switch_reset(int);
	extern int test_switch_usb(int);
	extern int test_switch_mhl(int);
	extern int test_hiusb_otg_intr_work(int);
	extern int test_hisi_usb_id_change(int);
	extern int test_hiusb_vbus_intr(int process);
	extern int test_hiusb_pullup(int process);
	
	extern int down_interruptible(struct semaphore *sem);
	extern int gpio_request(unsigned gpio, const char *label);
	extern int detect_charger_type();
	extern int notify_charger_type();	
	extern int hiusb_otg_and_phy_setup();
	extern int hiusb_otg_and_phy_cleanup();
	extern int dwc_dev_insert_init(struct lm_device *lm_dev);
	extern int dwc_host_insert_init(struct lm_device *lm_dev);
	extern int switch_reset();
	extern void dwc_host_draw_init(struct lm_device *lm_dev);

	extern int vbus_status();
	extern unsigned int pmu_version(void);
	extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,struct notifier_block *n);
    /* 被测全局变量 */

#ifdef __cplusplus
}
#endif

int ut_dwc_dev_insert_init(struct lm_device *lm_dev)
{
	return 0;
}

 void ut_dwc_host_draw_init(struct lm_device *lm_dev)
 {

 }




/*****************************************************************************
  (1)桩函数定义
*****************************************************************************/


/*****************************************************************************
  (2)UT函数实现
*****************************************************************************/
TEST(test_get_charger_name, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
    MOCKER(down_interruptible).stubs().will(returnValue(0));
    ret = test_get_charger_name(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/	
    GlobalMockObject::reset();
}

TEST(test_get_charger_name, UT002_test_noinit)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/


    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_get_charger_name(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

#if 0
TEST(test_get_charger_name, UT003_test_down_interruptible_error)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    MOCKER(down_interruptible).stubs().will(returnValue(-1));
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_get_charger_name(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}
#endif

TEST(hiusb_charger_registe_notifier, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
       MOCKER(atomic_notifier_chain_unregister).stubs().will(returnValue(0));

    ret = test_hiusb_charger_registe_notifier(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/    	
    GlobalMockObject::reset();
}

TEST(hiusb_charger_registe_notifier, UT002_test_noinit)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_charger_registe_notifier(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hiusb_charger_unregiste_notifier, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
 MOCKER(atomic_notifier_chain_unregister).stubs().will(returnValue(0));
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_charger_unregiste_notifier(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/    	
    GlobalMockObject::reset();
}

TEST(hiusb_charger_unregiste_notifier, UT002_test_noinit)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_charger_unregiste_notifier(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_init, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
	MOCKER(gpio_request).stubs().will(returnValue(0));
	

    ret = test_switch_init(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
    GlobalMockObject::reset();
}

TEST(switch_init, UT002_test_nopin)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/

    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_init(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_init, UT003_test_request_pin1_error)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(gpio_request)
        .stubs().will(returnValue(-1));
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_init(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(switch_init, UT004_test_request_pin2_error)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(gpio_request).stubs().will(returnValue(0));
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_init(3);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(switch_reset, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_reset(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_reset, UT002_test_noinit)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_reset(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_reset, UT003_test_nopin)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_reset(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}
#if 0
TEST(switch_usb, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_usb(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_usb, UT002_test_noinit)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_usb(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_usb, UT003_test_nopin)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_usb(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

#endif

TEST(switch_mhl, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_mhl(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_mhl, UT002_test_noinit)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_mhl(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(switch_mhl, UT003_test_nopin)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_switch_mhl(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hiusb_otg_intr_work, UT001_test_usbinsert)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(hiusb_otg_and_phy_setup)
    	.stubs().will(returnValue(0));
    MOCKER(detect_charger_type)
    	.stubs().will(returnValue(0x55555555));
    MOCKER(notify_charger_type)
    	.stubs().will(returnValue(0));
    MOCKER(vbus_status)
    	.stubs().will(returnValue(1));    
	MOCKER(pmu_version)
    	.stubs().will(returnValue(1));

	MOCKER(dwc_dev_insert_init).stubs().will(returnValue(0));
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
        MOCKER(down_interruptible).stubs().will(returnValue(0));
    ret = test_hiusb_otg_intr_work(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}


TEST(hiusb_otg_intr_work, UT002_test_usbdraw)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(hiusb_otg_and_phy_cleanup).stubs().will(returnValue(0));
    MOCKER(notify_charger_type).stubs().will(returnValue(0));
		MOCKER(pmu_version).stubs().will(returnValue(1));
		    MOCKER(vbus_status).stubs().will(returnValue(1));  

	MOCKER(dwc_dev_insert_init).stubs().will(returnValue(0));
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
        MOCKER(down_interruptible).stubs().will(returnValue(0));
    ret = test_hiusb_otg_intr_work(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(-1,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(hiusb_otg_intr_work, UT003_test_idfall)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(hiusb_otg_and_phy_setup)
    	.stubs().will(returnValue(0));
		MOCKER(pmu_version)
    	.stubs().will(returnValue(1));

	MOCKER(dwc_dev_insert_init).stubs().will(returnValue(0));
	MOCKER(dwc_host_insert_init).stubs().will(returnValue(0));
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
        MOCKER(down_interruptible).stubs().will(returnValue(0));
    ret = test_hiusb_otg_intr_work(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(hiusb_otg_intr_work, UT004_test_idrise)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(hiusb_otg_and_phy_cleanup)
    	.stubs().will(returnValue(0));
    MOCKER(switch_reset)
    	.stubs().will(returnValue(0));
		MOCKER(pmu_version)
    	.stubs().will(returnValue(1));

	MOCKER(dwc_dev_insert_init).stubs().will(returnValue(0));
	MOCKER(dwc_host_draw_init).stubs().will(invoke(ut_dwc_host_draw_init));
	
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
        MOCKER(down_interruptible).stubs().will(returnValue(0));
    ret = test_hiusb_otg_intr_work(3);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(hiusb_otg_intr_work, UT005_test_other)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/
        MOCKER(down_interruptible).stubs().will(returnValue(0));	
		MOCKER(pmu_version)
    	.stubs().will(returnValue(1));

	MOCKER(dwc_dev_insert_init).stubs().will(returnValue(0));

    ret = test_hiusb_otg_intr_work(4);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hiusb_otg_intr_work, UT006_test_down_interruptible_error)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
    MOCKER(down_interruptible)
        .stubs().will(returnValue(-1));	
		MOCKER(pmu_version)
    	.stubs().will(returnValue(1));

	MOCKER(dwc_dev_insert_init).stubs().will(returnValue(0));
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_otg_intr_work(5);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
	GlobalMockObject::reset();
}

TEST(hisi_usb_id_change, UT001_test_ok)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hisi_usb_id_change(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hisi_usb_id_change, UT002_test_noinit)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hisi_usb_id_change(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hisi_usb_id_change, UT003_test_badflag)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hisi_usb_id_change(2);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(ERROR,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hiusb_vbus_intr, UT001_test_usbinsert)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_vbus_intr(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hiusb_vbus_intr, UT002_test_usbdraw)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_vbus_intr(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hiusb_pullup, UT001_test_gadget_noton)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_pullup(0);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}

TEST(hiusb_vbus_intr, UT002_test_gadget_ison)
{

    /*************************************************************************
      (1)初始化测试环境
    *************************************************************************/
    int ret = 0;
	
    /*************************************************************************
      (2)设置被测函数形参
    *************************************************************************/
	
    /*************************************************************************
      (3)执行被测函数
    *************************************************************************/

    ret = test_hiusb_pullup(1);

    /*************************************************************************
      (4)检测测试结果
    *************************************************************************/
    EXPECT_EQ(OK,ret);

    /*************************************************************************
      (5)清理测试环境
    *************************************************************************/
}
#endif
